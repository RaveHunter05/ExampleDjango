{"remainingRequest":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\src\\components\\Body2.vue?vue&type=template&id=36ecfed0&scoped=true&","dependencies":[{"path":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\src\\components\\Body2.vue","mtime":1575296716743},{"path":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Socrates\\Documents\\Pyshark\\blog\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}